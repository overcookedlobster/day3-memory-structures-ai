name: GitHub Classroom Workflow

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  autograding:
    name: Autograding
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc make valgrind

      - name: Create Build Directory
        run: mkdir -p bin

      - name: Make Test Scripts Executable
        run: chmod +x tests/*.sh

      - name: Task 1 - Pointer Operations
        id: test-pointers
        run: |
          echo "Testing Task 1: Pointer Operations..."
          if ./tests/test_pointers.sh 2>&1 | grep -q "POINTER_TESTS_PASSED"; then
            echo "status=PASS" >> $GITHUB_OUTPUT
            echo "points=25" >> $GITHUB_OUTPUT
          else
            echo "status=FAIL" >> $GITHUB_OUTPUT
            echo "points=0" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Task 2 - Structure Implementation
        id: test-structures
        run: |
          echo "Testing Task 2: Structure Implementation..."
          if ./tests/test_structures.sh 2>&1 | grep -q "STRUCTURE_TESTS_PASSED"; then
            echo "status=PASS" >> $GITHUB_OUTPUT
            echo "points=25" >> $GITHUB_OUTPUT
          else
            echo "status=FAIL" >> $GITHUB_OUTPUT
            echo "points=0" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Task 3 - Bit Manipulation
        id: test-bits
        run: |
          echo "Testing Task 3: Bit Manipulation..."
          if ./tests/test_bit_operations.sh 2>&1 | grep -q "BIT_TESTS_PASSED"; then
            echo "status=PASS" >> $GITHUB_OUTPUT
            echo "points=25" >> $GITHUB_OUTPUT
          else
            echo "status=FAIL" >> $GITHUB_OUTPUT
            echo "points=0" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Task 4 - Array Handling
        id: test-arrays
        run: |
          echo "Testing Task 4: Array Handling..."
          if ./tests/test_multi_chip.sh 2>&1 | grep -q "MULTI_CHIP_TESTS_PASSED"; then
            echo "status=PASS" >> $GITHUB_OUTPUT
            echo "points=25" >> $GITHUB_OUTPUT
          else
            echo "status=FAIL" >> $GITHUB_OUTPUT
            echo "points=0" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true


      - name: Generate Detailed Summary
        run: |
          # Calculate total score
          pointer_points=${{ steps.test-pointers.outputs.points }}
          structure_points=${{ steps.test-structures.outputs.points }}
          bit_points=${{ steps.test-bits.outputs.points }}
          array_points=${{ steps.test-arrays.outputs.points }}

          total_points=$((pointer_points + structure_points + bit_points + array_points))

          # Create detailed summary with tabular results
          echo "## Autograding Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Task | Status | Points Earned | Max Points | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|---------------|------------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Task 1: Pointer Operations | ${{ steps.test-pointers.outputs.status }} | $pointer_points | 25 | Memory addressing and dereferencing |" >> $GITHUB_STEP_SUMMARY
          echo "| Task 2: Structure Implementation | ${{ steps.test-structures.outputs.status }} | $structure_points | 25 | ChipState design and usage |" >> $GITHUB_STEP_SUMMARY
          echo "| Task 3: Bit Manipulation | ${{ steps.test-bits.outputs.status }} | $bit_points | 25 | Register operations and bit fields |" >> $GITHUB_STEP_SUMMARY
          echo "| Task 4: Array Handling | ${{ steps.test-arrays.outputs.status }} | $array_points | 25 | Multi-chip array operations |" >> $GITHUB_STEP_SUMMARY
          echo "| **TOTAL SCORE** | **$([ $total_points -eq 100 ] && echo "PERFECT" || echo "PARTIAL")** | **$total_points** | **100** | **Complete assignment grade** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add score interpretation
          if [ $total_points -eq 100 ]; then
            echo "### Perfect Score! (100%)" >> $GITHUB_STEP_SUMMARY
            echo "Congratulations! All requirements implemented correctly." >> $GITHUB_STEP_SUMMARY
          elif [ $total_points -ge 75 ]; then
            echo "### Excellent Work! ($total_points%)" >> $GITHUB_STEP_SUMMARY
            echo "Most functionality working. Review failing tests above." >> $GITHUB_STEP_SUMMARY
          elif [ $total_points -ge 50 ]; then
            echo "### Good Progress! ($total_points%)" >> $GITHUB_STEP_SUMMARY
            echo "Core functionality developing. Focus on failing test cases." >> $GITHUB_STEP_SUMMARY
          else
            echo "### Keep Working! ($total_points%)" >> $GITHUB_STEP_SUMMARY
            echo "Significant implementation needed. Review TODO comments in source files." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. **Review failing tests** in the table above" >> $GITHUB_STEP_SUMMARY
          echo "2. **Complete TODO implementations** in source files" >> $GITHUB_STEP_SUMMARY
          echo "3. **Test your implementations** locally before pushing" >> $GITHUB_STEP_SUMMARY
          echo "4. **Commit your changes** with descriptive messages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Final Grade**: $total_points/100 points" >> $GITHUB_STEP_SUMMARY

      - name: Run Official Autograding
        uses: education/autograding@v1
        continue-on-error: true

